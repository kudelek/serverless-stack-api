{
  "version": 3,
  "sources": ["../../lib/index.js", "../../lib/S3Stack.js", "../../lib/DynamoDBStack.js", "../../lib/CognitoStack.js", "../../lib/CognitoAuthRole.js"],
  "sourcesContent": ["import S3Stack from \"./S3Stack\";\nimport DynamoDBStack from \"./DynamoDBStack\";\nimport CognitoStack from \"./CognitoStack\";\n\n// Add stacks\nexport default function main(app) {\n  new DynamoDBStack(app, \"dynamodb\");\n\n  const s3 = new S3Stack(app, \"s3\");\n\n  new CognitoStack(app, \"cognito\", { bucketArn: s3.bucket.bucketArn });\n}", "import * as cdk from \"@aws-cdk/core\";\r\nimport * as s3 from \"@aws-cdk/aws-s3\";\r\nimport * as sst from \"@serverless-stack/resources\";\r\n\r\nexport default class S3Stack extends sst.Stack {\r\n  // Public reference to the S3 bucket\r\n  bucket;\r\n\r\n  constructor(scope, id, props) {\r\n    super(scope, id, props);\r\n\r\n    this.bucket = new s3.Bucket(this, \"Uploads\", {\r\n      // Allow client side access to the bucket from a different domain\r\n      cors: [\r\n        {\r\n          maxAge: 3000,\r\n          allowedOrigins: [\"*\"],\r\n          allowedHeaders: [\"*\"],\r\n          allowedMethods: [\"GET\", \"PUT\", \"POST\", \"DELETE\", \"HEAD\"],\r\n        },\r\n      ],\r\n    });\r\n\r\n    // Export values\r\n    new cdk.CfnOutput(this, \"AttachmentsBucketName\", {\r\n      value: this.bucket.bucketName,\r\n    });\r\n  }\r\n}", "import { CfnOutput } from \"@aws-cdk/core\";\r\nimport * as dynamodb from \"@aws-cdk/aws-dynamodb\";\r\nimport * as sst from \"@serverless-stack/resources\";\r\n\r\nexport default class DynamoDBStack extends sst.Stack {\r\n    constructor(scope, id, props) {\r\n        super(scope, id, props);\r\n\r\n        const app = this.node.root;\r\n\r\n        const table = new dynamodb.Table(this, \"Table\", {\r\n            billingMode: dynamodb.BillingMode.PAY_PER_REQUEST, // Use on-demand billing mode\r\n            sortKey: { name: \"musicsheetId\", type: dynamodb.AttributeType.STRING },\r\n            partitionKey: { name: \"userId\", type: dynamodb.AttributeType.STRING },\r\n        });\r\n\r\n        //Output values\r\n        new CfnOutput(this, \"TableName\", {\r\n            value: table.tableName,\r\n            exportName: app.logicalPrefixedName(\"TableName\"),\r\n        });\r\n        new CfnOutput(this, \"TableArn\", {\r\n            value: table.tableArn,\r\n            exportName: app.logicalPrefixedName(\"TableArn\"),\r\n        });\r\n    }\r\n}", "import { CfnOutput } from \"@aws-cdk/core\";\r\nimport * as iam from \"@aws-cdk/aws-iam\";\r\nimport * as cognito from \"@aws-cdk/aws-cognito\";\r\nimport * as sst from \"@serverless-stack/resources\";\r\nimport CognitoAuthRole from \"./CognitoAuthRole\";\r\n\r\nexport default class CognitoStack extends sst.Stack {\r\n  constructor(scope, id, props) {\r\n    super(scope, id, props);\r\n\r\n    const { bucketArn } = props;\r\n\r\n    const app = this.node.root;\r\n\r\n    const userPool = new cognito.UserPool(this, \"UserPool\", {\r\n      selfSignUpEnabled: true, // Allow users to sign up\r\n      autoVerify: { email: true }, // Verify email addresses by sending a verification code\r\n      signInAliases: { email: true }, // Set email as an alias\r\n    });\r\n\r\n    const userPoolClient = new cognito.UserPoolClient(this, \"UserPoolClient\", {\r\n      userPool,\r\n      generateSecret: false, // Don't need to generate secret for web app running on browsers\r\n    });\r\n\r\n    const identityPool = new cognito.CfnIdentityPool(this, \"IdentityPool\", {\r\n      allowUnauthenticatedIdentities: false, // Don't allow unathenticated users\r\n      cognitoIdentityProviders: [\r\n        {\r\n          clientId: userPoolClient.userPoolClientId,\r\n          providerName: userPool.userPoolProviderName,\r\n        },\r\n      ],\r\n    });\r\n\r\n    const authenticatedRole = new CognitoAuthRole(this, \"CognitoAuthRole\", {\r\n      identityPool,\r\n    });\r\n\r\n    authenticatedRole.role.addToPolicy(\r\n      // IAM policy granting users permission to a specific folder in the S3 bucket\r\n      new iam.PolicyStatement({\r\n        actions: [\"s3:*\"],\r\n        effect: iam.Effect.ALLOW,\r\n        resources: [\r\n          bucketArn + \"/private/${cognito-identity.amazonaws.com:sub}/*\",\r\n        ],\r\n      })\r\n    );\r\n\r\n    // Export values\r\n    new CfnOutput(this, \"UserPoolId\", {\r\n      value: userPool.userPoolId,\r\n    });\r\n    new CfnOutput(this, \"UserPoolClientId\", {\r\n      value: userPoolClient.userPoolClientId,\r\n    });\r\n    new CfnOutput(this, \"IdentityPoolId\", {\r\n      value: identityPool.ref,\r\n    });\r\n    new CfnOutput(this, \"AuthenticatedRoleName\", {\r\n      value: authenticatedRole.role.roleName,\r\n      exportName: app.logicalPrefixedName(\"CognitoAuthRole\"),\r\n    });\r\n  }\r\n}", "import * as cdk from \"@aws-cdk/core\";\r\nimport * as iam from \"@aws-cdk/aws-iam\";\r\nimport * as cognito from \"@aws-cdk/aws-cognito\";\r\n\r\nexport default class CognitoAuthRole extends cdk.Construct {\r\n  // Public reference to the IAM role\r\n  role;\r\n\r\n  constructor(scope, id, props) {\r\n    super(scope, id);\r\n\r\n    const { identityPool } = props;\r\n\r\n    // IAM role used for authenticated users\r\n    this.role = new iam.Role(this, \"CognitoDefaultAuthenticatedRole\", {\r\n      assumedBy: new iam.FederatedPrincipal(\r\n        \"cognito-identity.amazonaws.com\",\r\n        {\r\n          StringEquals: {\r\n            \"cognito-identity.amazonaws.com:aud\": identityPool.ref,\r\n          },\r\n          \"ForAnyValue:StringLike\": {\r\n            \"cognito-identity.amazonaws.com:amr\": \"authenticated\",\r\n          },\r\n        },\r\n        \"sts:AssumeRoleWithWebIdentity\"\r\n      ),\r\n    });\r\n    this.role.addToPolicy(\r\n      new iam.PolicyStatement({\r\n        effect: iam.Effect.ALLOW,\r\n        actions: [\r\n          \"mobileanalytics:PutEvents\",\r\n          \"cognito-sync:*\",\r\n          \"cognito-identity:*\",\r\n        ],\r\n        resources: [\"*\"],\r\n      })\r\n    );\r\n\r\n    new cognito.CfnIdentityPoolRoleAttachment(\r\n      this,\r\n      \"IdentityPoolRoleAttachment\",\r\n      {\r\n        identityPoolId: identityPool.ref,\r\n        roles: { authenticated: this.role.roleArn },\r\n      }\r\n    );\r\n  }\r\n}"],
  "mappings": "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",
  "names": []
}
